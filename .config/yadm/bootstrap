#!/bin/bash
set -e

function log {
  if [ $# -ne 1 ]; then
    echo "Invalid log() with $# arguments: $*"
    return -1
  fi
  echo "$(tput setaf 2)[$(date '+%Y-%m-%d %H:%M:%S %z')]$(tput sgr0) $1"
}

function install_dotvim {
  if [ -d "$HOME/.vim" ]; then
    log "Updating .vim git repo"
    git -C $HOME/.vim pull --rebase || true
    log "Upgrading .vim plugins"
    vim +PlugUpgrade +PlugUpdate +PlugClean +PlugInstall +qall
  else
    log "Installing .vim"
    git clone git@github.com:alexcepoi/dotvim.git "$HOME/.vim"
    curl -fLo "$HOME/.vim/autoload/plug.vim" --create-dirs \
      https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim

    vim +PlugInstall +qall
  fi
}

function install_root_dotvim {
  if sudo test -d ~root/.vim; then
    log "Upgrading ~root/.vim git repo"
    sudo git -C ~root/.vim pull --rebase || true
  else
    log "Installing ~root/.vim"
    sudo git clone https://github.com/alexcepoi/dotvim.git ~root/.vim
  fi
}

function install_dotnvim {
  if [ -d "$HOME/.config/nvim" ]; then
    log "Updating .config/nvim git repo"
    git -C $HOME/.config/nvim pull --rebase || true
    log "Upgrading .config/nvim plugins"
    nvim --headless -c 'autocmd User PackerComplete quitall' -c 'PackerSync'
  else
    log "Installing .config/nvim"
    git clone git@github.com:alexcepoi/dotnvim.git "$HOME/.config/nvim"
    git clone --depth 1 https://github.com/wbthomason/packer.nvim ~/.local/share/nvim/site/pack/packer/start/packer.nvim

    nvim --headless -c 'autocmd User PackerComplete quitall' -c 'PackerSync'
  fi
}

function install_local_dotfiles {
  function _contains {
    local e match="$1"
    shift
    for e; do
      [[ $e =~ ^$match(/.*)?$ ]] && return 0
    done
    return 1
  }
  function _symlink_dotfiles {
    for dir in $@; do
      if [[ $dir =~ \./ || $dir =~ ^[/~] ]]; then
        echo >&2 "Symlink directory path '$dir' not supported"
        exit -1
      fi
      if [[ $dir == "." ]]; then
        local target_dir=".config/yadm/local"
        local link_dir="."
      elif [[ $dir == ".config" ]]; then
        local target_dir="yadm/local/$dir"
        local link_dir="./$dir"
      else
        local prefix="${dir//[^\/]/}"
        local prefix="${prefix//[\/]/../}"
        local target_dir="$prefix../.config/yadm/local/$dir"
        local link_dir="./$dir"
      fi

      # Delete broken symlinks.
      if [[ -d $link_dir ]]; then
        find $link_dir -mindepth 1 -maxdepth 1 -type l | while read target; do
          if [[ ! -e $target && $(readlink $target) == *yadm/local/* ]]; then
            echo "${target#./} $(tput setaf 3)[purged]$(tput sgr0)"
            rm $target
          fi
        done
      fi

      # Create local symlinks.
      if [[ -d $link_dir/$target_dir ]]; then
        (cd $link_dir && find $target_dir -mindepth 1 -maxdepth 1 ! -name ".git" ! -name ".gitignore") | while read target; do
          mkdir -p $link_dir
          local target_basename=${target##*/}
          local link=$link_dir/${target_basename}
          local link=${link#./}

          # Don't symlink directories in which we need to selectively symlink.
          if _contains $link $@; then
            continue
          fi

          if [[ -L $link && $(readlink $link) == $target ]]; then
            echo "$link -> $target $(tput setaf 2)[ok]$(tput sgr0)"
          elif [[ -e $link ]]; then
            echo "$link -> $target $(tput setaf 1)[conflict]$(tput sgr0)"
          else
            ln -snv $target $link
          fi
        done
      fi
    done
  }
  log "Installing local dotfiles"
  _symlink_dotfiles "." ".config" ".config/goobuntu-backups" ".local/bin"
}

function install_ssh_keys {
  log "Authorizing local ssh keys"
  local keys_fname=$HOME/.ssh/authorized_keys
  find $HOME/.ssh/*.pub -type f | while read pubkey_fname; do
    local pubkey=$(<$pubkey_fname)
    if [[ ! -f $keys_fname ]] || ! grep -q "$pubkey" $keys_fname; then
      echo $pubkey >>$keys_fname
    fi
  done
}

function local_install_yadm {
  log "Locally installing yadm"
  local yadm_bin="$HOME/.local/bin/yadm"
  curl -fLo $yadm_bin --create-dirs https://github.com/TheLocehiliosan/yadm/raw/master/yadm && chmod a+x $yadm_bin
}

function set_shell_zsh {
  local zsh_bin="/bin/zsh"
  if [[ -f $zsh_bin && $SHELL != $zsh_bin ]]; then
    log "Changing SHELL to zsh"
    chsh -s $zsh_bin
  fi
}

function setup_osx {
  local_install_yadm
}

function setup_debian {
  if ! sudo grep -q "^PS1=" ~root/.bashrc; then
    log "Fixing root PS1.. appending to ~root/.bashrc:"
    echo | sudo tee -a ~root/.bashrc
    echo PS1=\''${debian_chroot:+($debian_chroot)}\[\033[01;31m\]\h\[\033[01;34m\] \w \$\[\033[00m\] '\' | sudo tee -a ~root/.bashrc
  fi
}

# User configs.
cd $HOME
install_dotvim
command -v nvim &>/dev/null && install_dotnvim
install_local_dotfiles
install_ssh_keys
set_shell_zsh

# Root configs.
install_root_dotvim

# OS specific configs.
if [[ $OSTYPE =~ ^darwin ]]; then
  setup_osx
elif [[ $OSTYPE =~ ^linux ]]; then
  case $(grep ID /etc/os-release) in
  *debian*)
    setup_debian
    ;;
  esac
fi
