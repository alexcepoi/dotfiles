#!/bin/bash
set -euo pipefail

log() {
  if [ $# -ne 1 ]; then
    echo "Invalid log() with $# arguments: $*"
    return 1
  fi
  echo "$(tput setaf 2)[$(date '+%Y-%m-%d %H:%M:%S%z')]$(tput sgr0) $1"
}

install_local_dotfiles() {
  _contains() {
    local e match="$1"
    shift
    for e; do
      [[ $e =~ ^$match(/.*)?$ ]] && return 0
    done
    return 1
  }
  _symlink_dotfiles() {
    for dir in $@; do
      if [[ $dir =~ \./ || $dir =~ ^[/~] ]]; then
        echo >&2 "Symlink directory path '$dir' not supported"
        exit -1
      fi
      if [[ $dir == "." ]]; then
        local target_dir=".config/yadm/local"
        local link_dir="."
      elif [[ $dir == ".config" ]]; then
        local target_dir="yadm/local/$dir"
        local link_dir="./$dir"
      else
        local prefix="${dir//[^\/]/}"
        local prefix="${prefix//[\/]/../}"
        local target_dir="$prefix../.config/yadm/local/$dir"
        local link_dir="./$dir"
      fi

      # Delete broken symlinks.
      if [[ -d $link_dir ]]; then
        find $link_dir -mindepth 1 -maxdepth 1 -type l | while read target; do
          if [[ ! -e $target && $(readlink $target) == *yadm/local/* ]]; then
            echo "$(tput setaf 3)[rm]$(tput sgr0) ${target#./}"
            rm $target
          fi
        done
      fi

      # Create local symlinks.
      if [[ -d $link_dir/$target_dir ]]; then
        (cd $link_dir && find $target_dir -mindepth 1 -maxdepth 1 ! -name ".git" ! -name ".gitignore") | while read target; do
          mkdir -p $link_dir
          local target_basename=${target##*/}
          local link=$link_dir/${target_basename}
          local link=${link#./}

          # Don't symlink directories in which we need to selectively symlink.
          if _contains $link $@; then
            continue
          fi

          if [[ -L $link && $(readlink $link) == $target ]]; then
            echo "$(tput setaf 2)[ok]$(tput sgr0) $link -> $target"
          elif [[ -e $link ]]; then
            echo "$(tput setaf 1)[!!]$(tput sgr0) $link -> $target"
          else
            echo "$(tput setaf 4)[->]$(tput sgr0) $link -> $target"
            ln -sn $target $link
          fi
        done
      fi
    done
  }
  log "Checking local dotfiles"
  _symlink_dotfiles "." ".config" ".config/goobuntu-backups" ".local/bin"
}

check_yadm_install() {
  local yadm_bin="$HOME/.local/bin/yadm"
  if ! command -v yadm &>/dev/null; then
    log "Installing local yadm"
  elif [[ -f $yadm_bin ]]; then
    log "Updating local yadm"
  else
    return 0
  fi
  curl -fsSLo $yadm_bin --create-dirs https://github.com/TheLocehiliosan/yadm/raw/master/yadm
  chmod a+x $yadm_bin
}

install_dotvim() {
  log "Checking .vim repo"
  if [ -d "$HOME/.vim" ]; then
    log "Updating .vim repo"
    git -C $HOME/.vim pull --rebase || true

    log "Updating .vim plugins"
    vim +PlugUpgrade +PlugUpdate +PlugClean +PlugInstall +qall
  else
    log "Installing .vim repo"
    git clone git@github.com:alexcepoi/dotvim.git "$HOME/.vim"
    curl -fsSLo "$HOME/.vim/autoload/plug.vim" --create-dirs \
      https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim

    log "Installing .vim plugins"
    vim +PlugInstall +qall
  fi
}

install_root_dotvim() {
  log "Checking ~root/.vim repo"
  if sudo test -d ~root/.vim; then
    log "Updating ~root/.vim repo"
    sudo git -C ~root/.vim pull --rebase || true
  else
    log "Installing ~root/.vim repo"
    sudo git clone https://github.com/alexcepoi/dotvim.git ~root/.vim
  fi
}

install_dotnvim() {
  log "Checking .config/nvim repo"
  if [ -d "$HOME/.config/nvim" ]; then
    log "Updating .config/nvim repo"
    git -C $HOME/.config/nvim pull --rebase || true
  else
    log "Installing .config/nvim repo"
    git clone git@github.com:alexcepoi/dotnvim.git "$HOME/.config/nvim"
    git clone --depth 1 https://github.com/wbthomason/packer.nvim ~/.local/share/nvim/site/pack/packer/start/packer.nvim
  fi
  log "Updating .config/nvim plugins"
  nvim --headless -c 'autocmd User PackerComplete quitall' -c 'PackerSync'
}

install_ssh_keys() {
  log "Checking local ssh keys"
  local keys_fname=$HOME/.ssh/authorized_keys
  find $HOME/.ssh/*.pub -type f | while read pubkey_fname; do
    local pubkey=$(<$pubkey_fname)
    if [[ ! -f $keys_fname ]] || ! grep -q "$pubkey" $keys_fname; then
      log "Authorizing key ${pubkey_fname##*/}"
      echo $pubkey >>$keys_fname
    fi
  done
}

set_shell_zsh() {
  log "Checking SHELL"
  local zsh_bin="/bin/zsh"
  if [[ -f $zsh_bin && $SHELL != $zsh_bin ]]; then
    log "Changing SHELL to zsh"
    chsh -s $zsh_bin
  fi
}

setup_debian() {
  log "Checking ~root/.bashrc"
  if ! sudo grep -q "^PS1=" ~root/.bashrc; then
    log "Fixing root PS1.. appending to ~root/.bashrc:"
    echo | sudo tee -a ~root/.bashrc
    echo PS1=\''${debian_chroot:+($debian_chroot)}\[\033[01;31m\]\h\[\033[01;34m\] \w \$\[\033[00m\] '\' | sudo tee -a ~root/.bashrc
  fi
}

main() {
  # User configs.
  install_local_dotfiles
  check_yadm_install
  install_dotvim
  command -v nvim &>/dev/null && install_dotnvim
  install_ssh_keys
  set_shell_zsh

  # Root configs.
  install_root_dotvim

  # OS specific configs.
  if [[ $OSTYPE =~ ^linux ]]; then
    case $(grep ID /etc/os-release) in
    *debian*)
      setup_debian
      ;;
    esac
  fi
}

cd $HOME && main
